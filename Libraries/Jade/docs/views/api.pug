extends ./layout.pug

mixin anchoredHeading(el, anchor)
  #{el}(id=anchor)
    a.anchor(href='#' + anchor) #
    block

mixin funcHeading(func, firstArg, restOfArgs)
  +anchoredHeading('h3', func)
    = 'pug.' + func + '(' + firstArg + '[, options]' + (restOfArgs || '') + ')'

block content
  h1 API Documentation

  p This page details how to render Pug using the JavaScript API.

  +anchoredHeading('h2', 'installation') Installation

  p via npm:

  pre
    code npm install pug

  +anchoredHeading('h2', 'usage') Usage

  +anchoredHeading('h3', 'options') options

  p All API methods take the following set of options:

  .code
    div {
    dl.parameter-list
      dt filename:
      dd.type.string string
      dd.description Used in exceptions, and required for relative includes and extends
      dt basedir:
      dd.type.string string
      dd.description The base directory of all absolute inclusion
      dt doctype:
      dd.type.string string
      dd.description If the doctype is not specified as part of the template, you can specify it here.  It is sometimes useful to get self-closing tags and remove mirroring of boolean attributes.
      dt pretty:
      dd.type boolean | string
      dd.description Adds whitespace to the resulting HTML to make it easier for a human to read using #[code '&nbsp;&nbsp;'] as indentation. If a string is specified, that will be used as indentation instead (e.g. #[code '\t']).
      dt self:
      dd.type.boolean boolean
      dd.description Use a #[code self] namespace to hold the locals (false by default)
      dt debug:
      dd.type.boolean boolean
      dd.description If set to true, the tokens and function body is logged to stdout
      dt compileDebug:
      dd.type.boolean boolean
      dd.description If set to true, the function source will be included in the compiled template for better error messages (sometimes useful in development). It is enabled by default unless used with express in production mode.
      dt globals:
      dd.type.array= 'Array.<string>'
      dd.description Add a list of global names to make accessible in templates
      dt cache:
      dd.type.boolean boolean
      dd.description If set to true, compiled functions are cached. #[code filename] must be set as the cache key. Only applies to #[code render*]
      dt inlineRuntimeFunctions:
      dd.type.boolean boolean
      dd.description Inline runtime functions instead of #[code require]-ing them from a shared version. For client-side compilation, the default is true so that one does not have to include the runtime. For all other compilation or rendering types, the default is false.
      dt name:
      dd.type.string string
      dd.description The name of the template function. Only applies to #[code compile*Client*]
    div }

  +funcHeading('compile', 'source')

  p Compile a Pug template to a function which can be rendered multiple times with different locals.

  dl.parameter-list
    dt source
    dd.type.string string
    dd.description The source Pug template to compile
    dt options
    dd.type.object: a(href='#options') options
    dd.description An options object
  dl.returns
    dt returns
    dd.type.function function
    dd.description A function to generate the HTML from an object containing locals

  +js
    :jssrc
      var pug = require('pug');

      // Compile a function
      var fn = pug.compile('string of pug', options);

      // Render the function
      var html = fn(locals);
      // => '<string>of pug</string>'

  +funcHeading('compileFile', 'path')

  p Compile a Pug template from a file to a function which can be rendered multiple times with different locals.

  dl.parameter-list
    dt source
    dd.type.string string
    dd.description The path to a Pug file
    dt options
    dd.type.object: a(href='#options') options
    dd.description An options object
  dl.returns
    dt returns
    dd.type.function function
    dd.description A function to generate the HTML from an object containing locals

  +js
    :jssrc
      var pug = require('pug');

      // Compile a function
      var fn = pug.compileFile('path to pug file', options);

      // Render the function
      var html = fn(locals);
      // => '<string>of pug</string>'

  +funcHeading('compileClient', 'source')

  p Compile a Pug template to a string of JavaScript that can be used client side along with the Pug runtime.

  dl.parameter-list
    dt source
    dd.type.string string
    dd.description The Pug template to compile
    dt options
    dd.type.object: a(href='#options') options
    dd.description An options object
  dl.returns
    dt returns
    dd.type.string string
    dd.description A string of JavaScript representing a function

  +js
    :jssrc
      var pug = require('pug');

      // Compile a function
      var fn = pug.compileClient('string of pug', options);

      // Render the function
      var html = fn(locals);
      // => 'function template(locals) { return "<string>of pug</string>"; }'

  +funcHeading('compileClientWithDependenciesTracked', 'source')

  p Same as #[a(href='#compileClient'): code pug.compileClient] except that this method returns an object of the form:

  +js
    :jssrc
      {
        'body': 'function (locals) {...}',
        'dependencies': ['filename.pug']
      }

  p You should only use this method if you need to implement something like watching for changes to the Pug files.

  +funcHeading('compileFileClient', 'path')

  p Compile a Pug template file to a string of JavaScript that can be used client side along with the Pug runtime.

  dl.parameter-list
    dt path
    dd.type.string string
    dd.description The path to a Pug file
    dt options
    dd.type.object: a(href='#options') options
    dd.description An options object
    dt options.name
    dd.type.string string
    dd.description.
      If you pass a #[code .name] property on the options object, it will be
      used as the function name for your client side template function.
  dl.returns
    dt returns
    dd.type.string string
    dd.description A JavaScript function body.

  p First, our template file.

  +pug
    :pugsrc
      h1 This is a Pug template
      h2 By \#{author}

  p Then, we compile the Pug file into a function string.

  +js
    :jssrc
      var fs   = require('fs');
      var pug = require('pug');

      // Compile the template to a function string
      var jsFunctionString = pug.compileFileClient('/path/to/pugFile.pug', {name: "fancyTemplateFun"});

      // Maybe you want to compile all of your templates to a templates.js file and serve it to the client
      fs.writeFileSync("templates.js", jsFunctionString);

  p Here's what the output function string looks like (written to #[code templates.js]).

  +js
    :jssrc
      function fancyTemplateFun(locals) {
        var buf = [];
        var pug_mixins = {};
        var pug_interp;

        var locals_for_with = (locals || {});

        (function (author) {
          buf.push("<h1>This is a Pug template</h1><h2>By "
            + (pug.escape((pug_interp = author) == null ? '' : pug_interp))
            + "</h2>");
        }.call(this, "author" in locals_for_with ?
          locals_for_with.author : typeof author !== "undefined" ?
            author : undefined)
        );

        return buf.join("");
      }


  p Be sure to send the Pug runtime (#[code node_modules/pug/runtime.js]) to the client in addition to the template that you just compiled.

  +html
    :htmlsrc
      <!DOCTYPE html>
      <html>
        <head>
          <script src="/runtime.js"></script>
          <script src="/templates.js"></script>
        </head>

        <body>
          <h1>This is one fancy template.</h1>

          <script type="text/javascript">
            var html = window.fancyTemplateFun({author: "enlore"});
            var div = document.createElement("div");
            div.innerHTML = html;
            document.body.appendChild(div);
          </script>
        </body>
      </html>

  +funcHeading('render', 'source', '[, callback]')

  dl.parameter-list
    dt source
    dd.type.string string
    dd.description The source Pug template to render
    dt options
    dd.type.object: a(href='#options') options
    dd.description An options object, also used as the locals object
    dt callback
    dd.type.function function
    dd.description Node.js-style callback receiving the rendered results. #[strong This callback is called synchronously.]
  dl.returns
    dt returns
    dd.type.string string
    dd.description The resulting HTML string

  +js
    :jssrc
      var pug = require('pug');

      var html = pug.render('string of pug', options);
      // => '<string>of pug</string>'

  +funcHeading('renderFile', 'path', '[, callback]')

  dl.parameter-list
    dt path
    dd.type.string string
    dd.description The path to the Pug file to render
    dt options
    dd.type.object: a(href='#options') options
    dd.description An options object, also used as the locals object
    dt callback
    dd.type.function function
    dd.description Node.js-style callback receiving the rendered results. #[strong This callback is called synchronously.]
  dl.returns
    dt returns
    dd.type.string string
    dd.description The resulting HTML string

  +js
    :jssrc
      var pug = require('pug');

      var html = pug.renderFile('path/to/file.pug', options);
      // ...
