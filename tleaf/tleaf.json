{
    "file": "tleaf.json",
    "trials": 60,
    "startTrial": 0,
    "fitType": "median",
    "testUntil": 1,
    "mutationTrials": 1,
    "crossOverTrials": 1,
    "logFilePath": "build/tleaf.log",
    "tmpDirectory": "/scratch/41061a/ffarzat1981/clients",
    "logCategory": "optmization",
    "logFileClearing": false,
    "resultsDirectory": "build/results",
    "trialResultsFile": "Results.csv",
    "logWritter": "ConcreteLogger",
    "tester": "CommandTester",
    "outWriter": "CsvResultsOutWriter",
    "heuristics": [
        "GA"
    ],
    "port": 5000,
    "url": "ws://localhost",
    "clientTimeout": 30,
    "copyFileTimeout": 300,
    "clientsTotal": 40,
    "memory": 2408000,
    "libraries": [
        {
            "name": "tleaf",
            "path": "Libraries/tleaf",
            "mainFilePath": "src/ask.js"
        }
    ],
    "trialsConfiguration": [
        {
            "nodesSelectionApproach": "Global",
            "ByFunctionType": "static",
            "especific": {
                "neighborApproach": "FirstAscent",
                "neighborsToProcess": 20,
                "trials": 5000,
                "restartAtEnd": true,
                "ramdonRestart": false,
                "ramdonNodes": true,
                "nodesType": [
                    "AssignmentExpression",
                    "AssignmentPattern",
                    "ArrayExpression",
                    "ArrayPattern",
                    "ArrowFunctionExpression",
                    "AwaitExpression",
                    "BlockStatement",
                    "BinaryExpression",
                    "BreakStatement",
                    "CallExpression",
                    "CatchClause",
                    "ClassBody",
                    "ClassDeclaration",
                    "ClassExpression",
                    "ConditionalExpression",
                    "ContinueStatement",
                    "DoWhileStatement",
                    "DebuggerStatement",
                    "EmptyStatement",
                    "ExportAllDeclaration",
                    "ExportDefaultDeclaration",
                    "ExportNamedDeclaration",
                    "ExportSpecifier",
                    "ExpressionStatement",
                    "ForStatement",
                    "ForOfStatement",
                    "ForInStatement",
                    "FunctionDeclaration",
                    "FunctionExpression",
                    "Identifier",
                    "IfStatement",
                    "Import",
                    "ImportDeclaration",
                    "ImportDefaultSpecifier",
                    "ImportNamespaceSpecifier",
                    "ImportSpecifier",
                    "Literal",
                    "LabeledStatement",
                    "LogicalExpression",
                    "MemberExpression",
                    "MetaProperty",
                    "MethodDefinition",
                    "NewExpression",
                    "ObjectExpression",
                    "ObjectPattern",
                    "Program",
                    "Property",
                    "RestElement",
                    "ReturnStatement",
                    "SequenceExpression",
                    "SpreadElement",
                    "Super",
                    "SwitchCase",
                    "SwitchStatement",
                    "TaggedTemplateExpression",
                    "TemplateElement",
                    "TemplateLiteral",
                    "ThisExpression",
                    "ThrowStatement",
                    "TryStatement",
                    "UnaryExpression",
                    "UpdateExpression",
                    "VariableDeclaration",
                    "VariableDeclarator",
                    "WhileStatement",
                    "WithStatement",
                    "YieldExpression"
                ],
                "individuals": 100,
                "generations": 50,
                "crossoverProbability": 0,
                "mutationProbability": 75,
                "elitism": true,
                "elitismPercentual": 30
            }
        }
    ]
}
